<?xml version="1.0"?>
<doc>
    <assembly>
        <name>D1den.Calculation</name>
    </assembly>
    <members>
        <member name="T:D1den.Calculation.RotationAxisOrder">
            <summary>
            The order of the rotation axes. Specifies the type of Euler angles
            </summary>
            <remarks>The type of Euler angles directly depends
            on the order of the rotation axes, since the resulting rotation matrix
            is obtained by sequentially multiplying the rotation matrices around each axis.
            <see href="https://en.wikipedia.org/wiki/Euler_angles">Euler angles</see>
            </remarks>
        </member>
        <member name="F:D1den.Calculation.RotationAxisOrder.XYZ">
            <summary>
            XYZ rotation. Tait–Bryan angles
            </summary>
        </member>
        <member name="F:D1den.Calculation.RotationAxisOrder.ZXZ">
            <summary>
            ZXZ rotation. Standart Euler angles
            </summary>
        </member>
        <member name="F:D1den.Calculation.RotationAxisOrder.ZYZ">
            <summary>
            ZYZ rotation
            </summary>
        </member>
        <member name="T:D1den.Calculation.EulerAngles">
            <summary>
            Various Euler angles and operations with them
            </summary>
            <remarks>
            Defines Euler angles for use, which can be set either manually
            or from a rigid body rotation matrix.
            Euler angles describe the orientation of a rigid body in space
            in the most understandable way for a person,
            since they have only three angles. 
            <see href="https://en.wikipedia.org/wiki/Euler_angles">Euler angles</see>
            </remarks>
        </member>
        <member name="P:D1den.Calculation.EulerAngles.Alpha">
            <summary>
            Precession angle in radians
            </summary>
        </member>
        <member name="P:D1den.Calculation.EulerAngles.Beta">
            <summary>
            Nutation angle in radians
            </summary>
        </member>
        <member name="P:D1den.Calculation.EulerAngles.Gamma">
            <summary>
            Intrinsic rotation angle in radians
            </summary>
        </member>
        <member name="P:D1den.Calculation.EulerAngles.RotationAxisOrder">
            <summary>
            Rotation axis order
            </summary>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.#ctor(System.Double,System.Double,System.Double,D1den.Calculation.RotationAxisOrder)">
            <summary>
            Create Euler angles from parameters
            </summary>
            <param name="alpha">Precession angle</param>
            <param name="beta">Nutation angle</param>
            <param name="gamma">Intrinsic rotation angle</param>
            <param name="rotationAxisOrder">Rotation axis order</param>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.ValidateArrayLength(System.Double[])">
            <summary>
            Check that the length of the array is 3
            </summary>
            <param name="array">Array of angles</param>
            <exception cref="T:System.ArgumentException">If <paramref name="array"/>.Length != 3</exception>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.FromDegrees(System.Double,System.Double,System.Double,D1den.Calculation.RotationAxisOrder)">
            <summary>
            Create EulerAngles from degrees
            </summary>
            <param name="alpha">Precession angle in degrees</param>
            <param name="beta">Nutation angle in degrees</param>
            <param name="gamma">Intrinsic rotation angle in degrees</param>
            <param name="rotationAxisOrder">Rotation axis order</param>
            <returns>Euler angles</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.FromRadians(System.Double,System.Double,System.Double,D1den.Calculation.RotationAxisOrder)">
            <summary>
            Create EulerAngles from radians
            </summary>
            <param name="alpha">Precession angle</param>
            <param name="beta">Nutation angle</param>
            <param name="gamma">Intrinsic rotation angle</param>
            <param name="rotationAxisOrder">Rotation axis order</param>
            <returns>Euler angles</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.FromDegreesArray(System.Double[],D1den.Calculation.RotationAxisOrder)">
            <summary>
            Create EulerAngles from degrees array
            </summary>
            <param name="eulerAnglesArray">Angle array in degrees [alpha, beta, gamma]</param>
            <param name="rotationAxisOrder">Rotation axis order</param>
            <exception cref="T:System.ArgumentException">If <paramref name="eulerAnglesArray"/>.Length != 3</exception>
            <returns>Euler angles</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.FromRadiansArray(System.Double[],D1den.Calculation.RotationAxisOrder)">
            <summary>
            Create EulerAngles from radians array
            </summary>
            <param name="eulerAnglesArray">Angle array in radians [alpha, beta, gamma]</param>
            <param name="rotationAxisOrder">Rotation axis order</param>
            <exception cref="T:System.ArgumentException">If <paramref name="eulerAnglesArray"/>.Length != 3</exception>
            <returns>Euler angles</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.FromRotationMatrix(D1den.Calculation.Matrix,D1den.Calculation.RotationAxisOrder)">
            <summary>
            Get Euler angles from rotation matrix
            </summary>
            <param name="rotationMatrix">Rotation matrix 3x3</param>
            <param name="rotationAxisOrder">The order of the rotation axes. Specifies the type of Euler angles</param>
            <exception cref="T:System.ArgumentException">If <paramref name="rotationMatrix"/> doesn`t 3x3</exception>
            <returns>Euler angles</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.ToArray">
            <summary>
            Convert Euler angles to array
            </summary>
            <returns>Euler angles array</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.GetRotationMatrix">
            <summary>
            Convert Euler angles to rotation matrix
            </summary>
            <returns>Rotation matrix 3x3</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.ToString">
            <summary>
            Get Euler angles as string
            </summary>
            <returns>Euler angles as string</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.ToStringInDegrees">
            <summary>
            Get Euler angles as string in degrees
            </summary>
            <returns>Euler angles as string in degrees</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.Equals(System.Object)">
            <summary>
            Checking for equality of Euler angles
            </summary>
            <param name="obj">Packed Euler angles object</param>
            <returns>Result of checking</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.Equals(D1den.Calculation.EulerAngles)">
            <summary>
            Checking for equality of Euler angles
            </summary>
            <param name="other">Euler angles object</param>
            <returns>Result of checking</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.Equals(D1den.Calculation.EulerAngles,System.Double)">
            <summary>
            Checking with some accuracy the equality of the Euler angles
            </summary>
            <param name="other">Euler angles object</param>
            <param name="delta">Accuracy</param>
            <returns>Result of checking</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.GetHashCode">
            <summary>
            Hash code generation algorithm
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.op_Explicit(D1den.Calculation.EulerAngles)~System.Double[]">
            <summary>
            Convert Euler angles to array
            </summary>
            <param name="eulerAngles">Euler angles array</param>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.op_Equality(D1den.Calculation.EulerAngles,D1den.Calculation.EulerAngles)">
            <summary>
            Checking for equality of points
            </summary>
            <param name="eulers1">Euler angles 1</param>
            <param name="eulers2">Euler angles 2</param>
            <returns>Result of checking</returns>
        </member>
        <member name="M:D1den.Calculation.EulerAngles.op_Inequality(D1den.Calculation.EulerAngles,D1den.Calculation.EulerAngles)">
            <summary>
            Checking for inequality of points
            </summary>
            <param name="eulers1">Euler angles 1</param>
            <param name="eulers2">Euler angles 2</param>
            <returns>Result of checking</returns>
        </member>
        <member name="T:D1den.Calculation.MathA">
            <summary>
            Additional math functions
            </summary>
        </member>
        <member name="M:D1den.Calculation.MathA.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Aligning a value to a range
            </summary>
            <param name="value">Value</param>
            <param name="minValue">Minimum value</param>
            <param name="maxValue">Maximum value</param>
            <returns>Value in range</returns>
        </member>
        <member name="M:D1den.Calculation.MathA.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Aligning a value to a range
            </summary>
            <param name="value">Value</param>
            <param name="minValue">Minimum value</param>
            <param name="maxValue">Maximum value</param>
            <returns>Value in range</returns>
        </member>
        <member name="M:D1den.Calculation.MathA.DegreeToRadian(System.Double)">
            <summary>
            Convert degree to radian
            </summary>
            <param name="degreeAngle">Angle in degrees</param>
            <returns>Angle in radians</returns>
        </member>
        <member name="M:D1den.Calculation.MathA.RadianToDegree(System.Double)">
            <summary>
            Convert radian to degree
            </summary>
            <param name="radianAngle">Angle in radians</param>
            <returns>Angle in degrees</returns>
        </member>
        <member name="M:D1den.Calculation.MathA.CompareAlmostEqual(System.Double,System.Double,System.Double)">
            <summary>
            Compare numbers with some margin of error
            </summary>
            <param name="x">First number</param>
            <param name="y">Second number</param>
            <param name="delta">Comparison error</param>
            <returns>Result of сomparison</returns>
        </member>
        <member name="T:D1den.Calculation.Matrix">
            <summary>
            Матрица желаемой размерности
            </summary>
            <remarks>
            Матрица произвольного размера, над которой можно производить различные математические операции.
            </remarks>
        </member>
        <member name="P:D1den.Calculation.Matrix.MatrixData">
            <summary>
            Массив значений матрицы
            </summary>
        </member>
        <member name="P:D1den.Calculation.Matrix.Int32MatrixData">
            <summary>
            Массив приведённых к Int32 значений матрицы
            </summary>
        </member>
        <member name="P:D1den.Calculation.Matrix.RowCount">
            <summary>
            Количество строк
            </summary>
        </member>
        <member name="P:D1den.Calculation.Matrix.ColumnCount">
            <summary>
            Количество столбцов
            </summary>
        </member>
        <member name="P:D1den.Calculation.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Получить значение матрицы по строке и столбцу
            </summary>
            <param name="row">Индекс строки</param>
            <param name="column">Индекс столбца</param>
            <returns>Значение матрицы</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Объект матрицы
            </summary>
            <param name="rowCount">Число строк</param>
            <param name="columnCount">Число столбцов</param>
        </member>
        <member name="M:D1den.Calculation.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Объект матрицы
            </summary>
            <param name="matrixData">Двумерный double массив данных матрицы</param>
        </member>
        <member name="M:D1den.Calculation.Matrix.#ctor(System.Int32[0:,0:])">
            <summary>
            Объект матрицы
            </summary>
            <param name="matrixData">Двумерный int массив данных матрицы</param>
        </member>
        <member name="M:D1den.Calculation.Matrix.#ctor(System.Int32,System.Double)">
            <summary>
            Объект квадратной матрицы со значением по диагонали
            </summary>
            <param name="dimension">Размерность квадратной матрицы</param>
            <param name="diagonalValue">Значение по главной диагонали</param>
        </member>
        <member name="M:D1den.Calculation.Matrix.GetZerosMatrix(System.Int32)">
            <summary>
            Квадратная матрица нулей
            </summary>
            <param name="dimension">Размерность</param>
            <returns>Объект матрицы</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.GetEyeMatrix(System.Int32)">
            <summary>
            Единичная матрица (E)
            </summary>
            <param name="dimension">Размерность</param>
            <returns>Объект матрицы</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.GetOnesMatrix(System.Int32)">
            <summary>
            Квадратная матрица единиц
            </summary>
            <param name="dimension">Размерность</param>
            <returns>Объект матрицы</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Negative">
            <summary>
            Домножение матрицы на единицу
            </summary>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Transpose">
            <summary>
            Транспонирование матрицы
            </summary>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Add(System.Double)">
            <summary>
            Сложение матрицы и числа
            </summary>
            <param name="value">Число, складываемое с матрицей</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Add(D1den.Calculation.Matrix)">
            <summary>
            Сложение двух матриц
            </summary>
            <param name="matrix2">Матрица, складываемая с матрицей</param>
            <exception cref="T:System.ArgumentException">При несоответсвии размерностей будет вызвано исключение</exception>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Subtract(System.Double)">
            <summary>
            Разность матрицы и числа
            </summary>
            <param name="value">Число, вычитаемое из матрицы</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Subtract(D1den.Calculation.Matrix)">
            <summary>
            Разность матриц
            </summary>
            <param name="matrix2">Матрица, вычитаемая из матрицы</param>
            <exception cref="T:System.ArgumentException">При несоответсвии размерностей будет вызвано исключение</exception>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Multiply(System.Double)">
            <summary>
            Произведение матрицы и числа
            </summary>
            <param name="value">Множитель матрицы</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Divide(System.Double)">
            <summary>
            Деление матрицы на число
            </summary>
            <param name="value">Делитель матрицы</param>
            <exception cref="T:System.DivideByZeroException">При делителе = 0</exception>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Multiply(D1den.Calculation.Matrix)">
            <summary>
            Произведение матриц
            </summary>
            <param name="matrix2">Матрица, умножаемая на исходную</param>
            <exception cref="T:System.ArgumentException">При неравнестве стобцов первой матрицы и строк второй</exception>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.GetDeterminant">
            <summary>
            Получить определитель матрицы
            </summary>
            <exception cref="T:System.ArgumentException">Если матрица не квадратная</exception>
            <returns>Определитель</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.GetMinorMatrix(System.Int32,System.Int32)">
            <summary>
            Получить матрицу минора данной матрицы
            </summary>
            <param name="rowIndex">Индекс строки минора</param>
            <param name="columnIndex">Индекс столбца минора</param>
            <exception cref="T:System.ArgumentException">Если матрица не квадратная, или состоит из 1-го элемента</exception>
            <returns>Матрица минора</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Invert">
            <summary>
            Вычисление обратной матрицы
            </summary>
            <exception cref="T:System.ArgumentException">Если матрица не квадратная</exception>
            <returns>Обратная матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.GetEuclideanNorm">
            <summary>
            Вычисление Eвклидовой нормы
            <returns>Евклидовая норма</returns>
            </summary>
        </member>
        <member name="M:D1den.Calculation.Matrix.ToString">
            <summary>
            Преобразование матрицы к строке
            </summary>
            <returns>Строка матрицы</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.SetAllValues(System.Double)">
            <summary>
            Установить все значения матрицы
            </summary>
            <param name="value">Значение</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.ProcessActionOverData(System.Action{System.Int32,System.Int32})">
            <summary>
            Применить действие ко всем элементам матрицы
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:D1den.Calculation.Matrix.Equals(System.Object)">
            <summary>
            Метод сравнениния матриц по значениям
            </summary>
            <param name="obj">Упакованная матрица</param>
            <returns>Результат сравнения</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Equals(D1den.Calculation.Matrix)">
            <summary>
            Метод сравнениния матриц по значениям
            </summary>
            <param name="other">Матрица</param>
            <returns>Результат сравнения</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.GetHashCode">
            <summary>
            Алгоритм создания хэш-кода
            </summary>
            <returns>Хэш-код</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.Clone">
            <summary>
            Создать копию матрицы
            </summary>
            <returns>Копия матрицы привдённая к object</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Implicit(System.Double[0:,0:])~D1den.Calculation.Matrix">
            <summary>
            Преобразовать двумерный массив в матрицу
            </summary>
            <param name="matrixArray">Двумерный массив double</param>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Implicit(System.Int32[0:,0:])~D1den.Calculation.Matrix">
            <summary>
            Преобразовать двумерный массив в матрицу
            </summary>
            <param name="matrixArray">Двумерный массив int</param>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Implicit(System.Double[])~D1den.Calculation.Matrix">
            <summary>
            Преобразовать одномерный массив в матрицу
            </summary>
            <param name="matrixArray">Одномерный массив double</param>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Implicit(System.Int32[])~D1den.Calculation.Matrix">
            <summary>
            Преобразовать одномерный массив в матрицу
            </summary>
            <param name="matrixArray">Одномерный массив int</param>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Explicit(D1den.Calculation.Matrix)~System.Double[0:,0:]">
            <summary>
            Преобразовать матрицу к двумерному массиву double
            </summary>
            <param name="matrix">Матрица</param>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Explicit(D1den.Calculation.Matrix)~System.Int32[0:,0:]">
            <summary>
            Преобразовать матрицу к двумерному массиву int
            </summary>
            <param name="matrix">Матрица</param>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Addition(System.Double,D1den.Calculation.Matrix)">
            <summary>
            Сложение матрицы и числа
            </summary>
            <param name="value">Число, складываемое с матрицей</param>
            <param name="matrix">Матрица</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Addition(D1den.Calculation.Matrix,System.Double)">
            <summary>
            Сложение матрицы и числа
            </summary>
            <param name="value">Число, складываемое с матрицей</param>
            <param name="matrix">Матрица</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Addition(D1den.Calculation.Matrix,D1den.Calculation.Matrix)">
            <summary>
            Сложение матриц
            </summary>
            <param name="matrix1">Матрица</param>
            <param name="matrix2">Матрица</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Subtraction(D1den.Calculation.Matrix,System.Double)">
            <summary>
            Разность матрицы и числа
            </summary>
            <param name="value">Число, вычитаемое из матрицы</param>
            <param name="matrix">Матрица</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Subtraction(D1den.Calculation.Matrix,D1den.Calculation.Matrix)">
            <summary>
            Разность матриц
            </summary>
            <param name="matrix1">Матрица</param>
            <param name="matrix2">Матрица</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Multiply(D1den.Calculation.Matrix,System.Double)">
            <summary>
            Произведение матрицы и числа
            </summary>
            <param name="value">Множитель</param>
            <param name="matrix">Матрица</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Multiply(System.Double,D1den.Calculation.Matrix)">
            <summary>
            Произведение матрицы и числа
            </summary>
            <param name="value">Множитель</param>
            <param name="matrix">Матрица</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Multiply(D1den.Calculation.Matrix,D1den.Calculation.Matrix)">
            <summary>
            Произведение матриц
            </summary>
            <param name="matrix1">Матрица</param>
            <param name="matrix2">Матрица</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Division(D1den.Calculation.Matrix,System.Double)">
            <summary>
            Деление матрицы на число
            </summary>
            <param name="matrix">Матрица</param>
            <param name="value">Делитель</param>
            <returns>Матрица</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Equality(D1den.Calculation.Matrix,D1den.Calculation.Matrix)">
            <summary>
            Оператор проверки на равенство матриц
            </summary>
            <param name="matrix1">Матрица 1</param>
            <param name="matrix2">Матрица 2</param>
            <returns>Результат</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Inequality(D1den.Calculation.Matrix,D1den.Calculation.Matrix)">
            <summary>
            Оператор проверки на неравенство матриц
            </summary>
            <param name="matrix1">Матрица 1</param>
            <param name="matrix2">Матрица 2</param>
            <returns>Результат</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Equality(D1den.Calculation.Matrix,System.Object)">
            <summary>
            Оператор проверки на равенство матриц
            </summary>
            <param name="matrix1">Матрица 1</param>
            <param name="matrix2">Матрица 2</param>
            <returns>Результат</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Inequality(D1den.Calculation.Matrix,System.Object)">
            <summary>
            Оператор проверки на неравенство матриц
            </summary>
            <param name="matrix1">Матрица 1</param>
            <param name="matrix2">Матрица 2</param>
            <returns>Результат</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Equality(System.Object,D1den.Calculation.Matrix)">
            <summary>
            Оператор проверки на равенство матриц
            </summary>
            <param name="matrix1">Матрица 1</param>
            <param name="matrix2">Матрица 2</param>
            <returns>Результат</returns>
        </member>
        <member name="M:D1den.Calculation.Matrix.op_Inequality(System.Object,D1den.Calculation.Matrix)">
            <summary>
            Оператор проверки на неравенство матриц
            </summary>
            <param name="matrix1">Матрица 1</param>
            <param name="matrix2">Матрица 2</param>
            <returns>Результат</returns>
        </member>
        <member name="T:D1den.Calculation.Point3D">
            <summary>
            Point in 3-d space
            </summary>
        </member>
        <member name="P:D1den.Calculation.Point3D.X">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="P:D1den.Calculation.Point3D.Y">
            <summary>
            Y coordinate
            </summary>
        </member>
        <member name="P:D1den.Calculation.Point3D.Z">
            <summary>
            Z coordinate
            </summary>
        </member>
        <member name="M:D1den.Calculation.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creating a point by coordinates
            </summary>
        </member>
        <member name="M:D1den.Calculation.Point3D.#ctor(System.Double[])">
            <summary>
            Creating a point from an array of its coordinates
            </summary>
            <param name="pointArray">Array of coordinates [x, y, z]</param>
            <exception cref="T:System.ArgumentException">If <paramref name="pointArray"/>.Length != 3</exception>
        </member>
        <member name="M:D1den.Calculation.Point3D.ToArray">
            <summary>
            Convert point to array of coordinates
            </summary>
            <returns>Array of coordinatesт</returns>
        </member>
        <member name="M:D1den.Calculation.Point3D.GetDistance(D1den.Calculation.Point3D)">
            <summary>
            Get distance to other point
            </summary>
            <param name="point">Other point</param>
            <returns>Distance</returns>
        </member>
        <member name="M:D1den.Calculation.Point3D.ToString">
            <summary>
            Get point as string
            </summary>
            <returns>Point as string</returns>
        </member>
        <member name="M:D1den.Calculation.Point3D.Equals(System.Object)">
            <summary>
            Checking for equality of points
            </summary>
            <param name="obj">Packed point object</param>
            <returns>Result of checking</returns>
        </member>
        <member name="M:D1den.Calculation.Point3D.Equals(D1den.Calculation.Point3D)">
            <summary>
            Checking for equality of points
            </summary>
            <param name="other">Point object</param>
            <returns>Result of checking</returns>
        </member>
        <member name="M:D1den.Calculation.Point3D.GetHashCode">
            <summary>
            Hash code generation algorithm
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:D1den.Calculation.Point3D.op_Implicit(System.Double[])~D1den.Calculation.Point3D">
            <summary>
            Convert an array of coordinates to a point
            </summary>
            <param name="pointArray">Array of coordinates [x, y, z]</param>
            <exception cref="T:System.ArgumentException">If <paramref name="pointArray"/>.Length != 3</exception>
        </member>
        <member name="M:D1den.Calculation.Point3D.op_Explicit(D1den.Calculation.Point3D)~System.Double[]">
            <summary>
            Convert point to array of coordinates
            </summary>
            <param name="point">Point</param>
        </member>
        <member name="M:D1den.Calculation.Point3D.op_Equality(D1den.Calculation.Point3D,D1den.Calculation.Point3D)">
            <summary>
            Checking for equality of points
            </summary>
            <param name="point1">Point 1</param>
            <param name="point2">Point 2</param>
            <returns>Result of checking</returns>
        </member>
        <member name="M:D1den.Calculation.Point3D.op_Inequality(D1den.Calculation.Point3D,D1den.Calculation.Point3D)">
            <summary>
            Checking for inequality of points
            </summary>
            <param name="point1">Point 1</param>
            <param name="point2">Point 2</param>
            <returns>Result of checking</returns>>
        </member>
    </members>
</doc>
